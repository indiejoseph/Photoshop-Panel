<?xml version="1.0" encoding="utf-8"?>
<gpc defaultLocale="en_US" version="4" keySequence="61" currentLocale="en_US">
  <product appid="PHSP" version="14" name="Photoshop CC"/>
  <target id="PHSP-14"/>
  <ConfiguratorPanel name="Photoshop Panel" width="190" height="142" init="doInit" close="doClose" persistent="True" normalIcon="IMG/icon.png" darkNormalIcon="IMG/icon_i.png" extensionId="com.thefoakhouse.extensions.designtools" extensionVersion="1.0.0" menuName="Layout Tools" flyoutMenuAbout="$$$/Configurator/FlyoutMenu/about">
    <onInit><![CDATA[]]></onInit>
    <aboutBox><![CDATA[]]></aboutBox>
    <extensionDescription><![CDATA[]]></extensionDescription>
    <extensionAuthor><![CDATA[Joseph Cheng@Foak Productions Limited]]></extensionAuthor>
    <onClose><![CDATA[]]></onClose>
    <eventListeners>
      <function id="doInit" actionType="jsfunction" jsFunctionName="invoke_script">
        <param id="onInit"/>
      </function>
      <function id="doClose" actionType="jsfunction" jsFunctionName="invoke_script">
        <param id="onClose"/>
      </function>
    </eventListeners>
    <text _itemId="widget_text" toolTip="$$$/Configurator/Widget/Text/desc" styleName="scopeTextArea" width="100" height="15" backgroundAlpha="0" cfgVisible="$$$/Configurator/Attribute/visible/value###40" fontSize="10" color="0x999999" fontWeight="bold" fontStyle="normal" textDecoration="none" textAlign="left" backgroundColor="16777215" borderColor="12040892" borderStyle="none" x="10" y="10">
      <text><![CDATA[$$$/Configurator/key_###41]]></text>
    </text>
    <ps_script _itemId="ps_actionscript_script" label="$$$/Configurator/watermark/htmlText" toolTip="$$$/Configurator/ActionScript/Script/desc###22" cfgVisible="$$$/Configurator/Attribute/visible/value###23" click="onClick" icon="ps_script" iconx2="ps_scriptx2" overIcon="ps_script_r" showIcon="true" iconWidth="18" iconHeight="18" mouseUpIcon="IMG/selection.png" mouseOverIcon="IMG/selection_i.png" mouseDownSkinIcon="IMG/selection.png" x="10" y="33" width="28" height="28">
      <script><![CDATA[#target photoshopapp.bringToFront();//------------------ Main Function ------------------//var win = new Window("dialog {  \    orientation: 'column', \    alignChildren: ['fill', 'top'],  \    text: 'Selection size',  \    margins:12, \    \    inputGroup: Group {\        labelWidth: StaticText { text: 'Width' } \        width: EditText { text: '0', characters: 6, justify: 'left', alignment:['left', 'center']}, \        labelHeight: StaticText { text: 'Height' } \        height: EditText { text: '0', characters: 6, justify: 'left', alignment:['left', 'center']}, \    }\    bottomGroup: Group{ \        cancelButton: Button { text: 'Cancel', properties:{name:'Cancel'}, size: [120,24], alignment:['right', 'center'] }, \        applyButton: Button { text: 'Apply', properties:{name:'Ok'}, size: [120,24], alignment:['left', 'center'] }, \    }\}");win.bottomGroup.applyButton.onClick = function() {    var startRulerUnits = app.preferences.rulerUnits;    var dw = activeDocument.width;    var dh = activeDocument.height;    var w = parseInt(win.inputGroup.width.text);    var h = parseInt(win.inputGroup.height.text);    var top = 0;    var bottom = h;    var left = (dw/2) - (w/2);    var right = left + w;        preferences.rulerUnits = Units.PIXELS        if(w <= 0 || h <= 0) {        alert('Width or height must larger than 0');        return false;    }    activeDocument.selection.select([[left,top],[right,top],[right,bottom],[left,bottom]]);        // Restore default setting    preferences.rulerUnits = startRulerUnits;    // Close dialog    win.close(1);};win.bottomGroup.cancelButton.onClick = function() {    win.close(1);    };// show user the dialog windowwin.center();win.show();]]></script>
      <eventListeners>
        <function id="onClick" actionType="jsfunction" jsFunctionName="ps_invoke_script">
          <param id="script"/>
        </function>
      </eventListeners>
    </ps_script>
    <ps_script _itemId="ps_actionscript_script" label="$$$/Configurator/ActionScript/Script/name###24" toolTip="$$$/Configurator/ActionScript/Script/desc###25" cfgVisible="$$$/Configurator/Attribute/visible/value###26" click="onClick" icon="ps_script" iconx2="ps_scriptx2" overIcon="ps_script_r" showIcon="true" iconWidth="18" iconHeight="18" mouseUpIcon="IMG/guideline.png" mouseOverIcon="IMG/guideline_i.png" mouseDownSkinIcon="IMG/guideline.png" x="46" y="33" width="28" height="28">
      <script><![CDATA[#target photoshopapp.bringToFront();/*------------------ Main Function ------------------*/function guideLine(position, type){    var desc = new ActionDescriptor();    var desc2 = new ActionDescriptor();    desc2.putUnitDouble( charIDToTypeID('Pstn'), charIDToTypeID('#Pxl'), position );    desc2.putEnumerated( charIDToTypeID('Ornt'), charIDToTypeID('Ornt'), charIDToTypeID(type) );    desc.putObject( charIDToTypeID('Nw  '), charIDToTypeID('Gd  '), desc2 );    executeAction( charIDToTypeID('Mk  '), desc, DialogModes.NO );}/* Set ruler units to pixel */app.preferences.rulerUnits = Units.PIXELS;var startRulerUnits = app.preferences.rulerUnits;try{    /* Get available selection */    var bounds = app.activeDocument.selection.bounds;    var guides = app.activeDocument.guides;    var newGuides = [        {coordinate: bounds[1].value, direction: Direction.HORIZONTAL}, // top        {coordinate: bounds[3].value, direction: Direction.HORIZONTAL}, // bottom        {coordinate: bounds[0].value, direction: Direction.VERTICAL},   // left        {coordinate: bounds[2].value, direction: Direction.VERTICAL},   // right    ];    /* Remove duplicated guidelines */    for(var i = 0; i < guides.length; i++) {        var guide = guides[i];        for(var j = 0; j < newGuides.length; j++) {            var newGuide = newGuides[j];            if(newGuide.coordinate == guide.coordinate && newGuide.direction == guide.direction) {                newGuides.splice(j, 1);            }        }    }    /* Apply new guidelines */    for(var i = 0; i < newGuides.length; i++) {        var newGuide = newGuides[i];        var direction = (newGuide.direction == Direction.HORIZONTAL)?"Hrzn":"Vrtc";        guideLine(newGuide.coordinate, direction);    }} catch(e){    $.writeln(e);}/* Restore ruler units */app.preferences.rulerUnits = startRulerUnits;]]></script>
      <eventListeners>
        <function id="onClick" actionType="jsfunction" jsFunctionName="ps_invoke_script">
          <param id="script"/>
        </function>
      </eventListeners>
    </ps_script>
    <ps_script _itemId="ps_actionscript_script" label="$$$/Configurator/ActionScript/Script/name###31" toolTip="$$$/Configurator/ActionScript/Script/desc###32" cfgVisible="$$$/Configurator/Attribute/visible/value###33" click="onClick" icon="ps_script" iconx2="ps_scriptx2" overIcon="ps_script_r" showIcon="true" iconWidth="18" iconHeight="18" mouseUpIcon="IMG/goldenratio.png" mouseOverIcon="IMG/goldenratio_i.png" mouseDownSkinIcon="IMG/goldenratio.png" x="82" y="33" width="28" height="28">
      <script><![CDATA[#target photoshopapp.bringToFront();/*------------------ Main Function ------------------*/function guideLine(position, type){    var desc = new ActionDescriptor();    var desc2 = new ActionDescriptor();    desc2.putUnitDouble( charIDToTypeID('Pstn'), charIDToTypeID('#Pxl'), position );    desc2.putEnumerated( charIDToTypeID('Ornt'), charIDToTypeID('Ornt'), charIDToTypeID(type) );    desc.putObject( charIDToTypeID('Nw  '), charIDToTypeID('Gd  '), desc2 );    executeAction( charIDToTypeID('Mk  '), desc, DialogModes.NO );}/* Set ruler units to pixel */app.preferences.rulerUnits = Units.PIXELS;var startRulerUnits = app.preferences.rulerUnits;try{    /* Get available selection */    var guides = app.activeDocument.guides;    var bounds = app.activeDocument.selection.bounds;    var width = bounds[2] - bounds[0];    var colWidth = width/1.62; // Get first column width by golden ratio    var goldenRatioGuide = bounds[0] + colWidth;    var newGuides = [        {coordinate: bounds[1].value, direction: Direction.HORIZONTAL}, // top        {coordinate: bounds[3].value, direction: Direction.HORIZONTAL}, // bottom        {coordinate: bounds[0].value, direction: Direction.VERTICAL},   // left        {coordinate: bounds[2].value, direction: Direction.VERTICAL},   // right        {coordinate: goldenRatioGuide, direction: Direction.VERTICAL}	// Golden Ratio    ];    /* Remove duplicated guidelines */    for(var i = 0; i < guides.length; i++) {        var guide = guides[i];        for(var j = 0; j < newGuides.length; j++) {            var newGuide = newGuides[j];            if(newGuide.coordinate == guide.coordinate && newGuide.direction == guide.direction) {                newGuides.splice(j, 1);            }        }    }    /* Apply new guidelines */    for(var i = 0; i < newGuides.length; i++) {        var newGuide = newGuides[i];        var direction = (newGuide.direction == Direction.HORIZONTAL)?"Hrzn":"Vrtc";        guideLine(newGuide.coordinate, direction);    }} catch(e) {	$.writeln(e);}/* Restore ruler units */app.preferences.rulerUnits = startRulerUnits;]]></script>
      <eventListeners>
        <function id="onClick" actionType="jsfunction" jsFunctionName="ps_invoke_script">
          <param id="script"/>
        </function>
      </eventListeners>
    </ps_script>
    <hrule _itemId="widget_hrule" toolTip="$$$/Configurator/Widget/HRule/desc" width="170" height="2" cfgVisible="$$$/Configurator/Attribute/visible/value###39" x="10" y="69"/>
    <text _itemId="widget_text" toolTip="$$$/Configurator/Widget/Text/desc###42" styleName="scopeTextArea" width="100" height="15" backgroundAlpha="0" cfgVisible="$$$/Configurator/Attribute/visible/value###43" fontSize="10" color="0x999999" fontWeight="bold" fontStyle="normal" textDecoration="none" textAlign="left" backgroundColor="16777215" borderColor="12040892" borderStyle="none" x="10" y="79">
      <text><![CDATA[$$$/Configurator/key_###44]]></text>
    </text>
    <ps_script _itemId="ps_actionscript_script" label="$$$/Configurator/ActionScript/Script/name###34" toolTip="$$$/Configurator/ActionScript/Script/desc###35" cfgVisible="$$$/Configurator/Attribute/visible/value###36" click="onClick" icon="ps_script" iconx2="ps_scriptx2" overIcon="ps_script_r" showIcon="true" iconWidth="18" iconHeight="18" mouseUpIcon="IMG/comps.png" mouseOverIcon="IMG/comps_i.png" mouseDownSkinIcon="IMG/comps.png" x="10" y="102" width="28" height="28">
      <script><![CDATA[#target Photoshopfunction main(){    if(!documents.length) return;    var doc = app.activeDocument;    var outputFolder = Folder.selectDialog("Please select Output folder");    if(outputFolder == null ) return;    for( var c = 0; c < doc.layerComps.length; c++ ){        doc.layerComps[c].apply();        var saveFile = File(outputFolder + "/" + doc.layerComps[c].name + ".png");        sfwPNG24(saveFile);    }}function sfwPNG24(saveFile){    var pngOpts = new ExportOptionsSaveForWeb;     pngOpts.format = SaveDocumentType.PNG;    pngOpts.PNG8 = false;     pngOpts.transparency = true;     pngOpts.interlaced = false;     pngOpts.quality = 100;    pngOpts.includeProfile=true;    activeDocument.exportDocument(new File(saveFile),ExportType.SAVEFORWEB,pngOpts); }main();]]></script>
      <eventListeners>
        <function id="onClick" actionType="jsfunction" jsFunctionName="ps_invoke_script">
          <param id="script"/>
        </function>
      </eventListeners>
    </ps_script>
    <ps_script _itemId="ps_actionscript_script" label="$$$/Configurator/ActionScript/Script/name###54" toolTip="$$$/Configurator/ActionScript/Script/desc###55" cfgVisible="$$$/Configurator/Attribute/visible/value###56" click="onClick" icon="ps_script" iconx2="ps_scriptx2" overIcon="ps_script_r" showIcon="true" iconWidth="18" iconHeight="18" mouseUpIcon="IMG/android.png" mouseOverIcon="IMG/android_i.png" mouseDownSkinIcon="IMG/android.png" x="46" y="102" width="28" height="28">
      <script><![CDATA[#target photoshop// Your working documents must be 200% sizefunction main() {    var sizes = {"xhdpi":"100%", "hdpi":"75%", "mdpi":"50%"};    // get active document    var docRef = app.activeDocument;    $.writeln(docRef.showSliceNumbers);    var outputFolder = Folder.selectDialog("Please select Output folder");    if(outputFolder == null ) return;    // Get current history state    var history = docRef.activeHistoryState;    for(var key  in sizes) {        var size = sizes[key];        // Resize document        docRef.resizeImage(size, size);                // save for web        var saveFile = File(outputFolder + "/" + "image.png");        sfwPNG24(saveFile);                // rename folder        var folder = Folder(outputFolder + "/images" );        if (!folder.exists) {            folder.create();            moveFile(outputFolder + "/" + "image.png", outputFolder + "/images/image.png");        }        folder.rename(key);                // restore previous state        docRef.activeHistoryState =  history;    }}function moveFile(oldPath, newPath) {    var oldFile = new File(oldPath);    var newFile = new File(newPath);        if(!oldFile.exists) return;    if(oldFile.copy(newFile)){        oldFile.remove();    }else{        $.writeln('Cant move file');    }}function sfwPNG24(saveFile){    var pngOpts = new ExportOptionsSaveForWeb;     pngOpts.format = SaveDocumentType.PNG;    pngOpts.PNG8 = false;     pngOpts.transparency = true;     pngOpts.interlaced = false;     pngOpts.quality = 100;    pngOpts.includeProfile=true;    activeDocument.exportDocument(new File(saveFile),ExportType.SAVEFORWEB,pngOpts); }main();]]></script>
      <eventListeners>
        <function id="onClick" actionType="jsfunction" jsFunctionName="ps_invoke_script">
          <param id="script"/>
        </function>
      </eventListeners>
    </ps_script>
  </ConfiguratorPanel>
</gpc>